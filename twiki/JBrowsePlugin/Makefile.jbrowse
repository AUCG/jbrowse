# Variables

# Cloned jbrowse repository:
JROOT = /usr/local/jbrowse
JBIN  = $(JROOT)/bin

# JBrowse programs
PREPARE_REFSEQS = perl $(JBIN)/prepare-refseqs.pl
BIODB_TO_JSON   = perl $(JBIN)/biodb-to-json.pl
GFF_TO_JSON     = perl $(JBIN)/gff-to-json.pl
WIG_TO_JSON     = perl $(JBIN)/wig-to-json.pl
GENERATE_NAMES  = perl $(JBIN)/generate-names.pl

# Current working directory (cwd):
# FASTA file of reference sequences in cwd
REFSEQS = refseqs.fasta

# all other FASTA files in cwd
ALL_FASTA  = $(filter-out $(REFSEQS),$(wildcard *.fasta) $(wildcard *.fa))

# all BED files in cwd
ALL_BED    = $(wildcard *.bed)

# GFF files autogenerated from BED files
ALL_BED2GFF = $(subst .bed,.gff,$(ALL_BED))

# all GFF files in cwd, excluding those auto-generated from BED files
ALL_GFF    = $(filter-out $(ALL_BED2GFF),$(wildcard *.gff))

# all WIG files in cwd
ALL_WIG    = $(wildcard *.wig)

# name of JBrowse config file in cwd
CONFIG = config.js

# JBrowse target files
CHUNKS = data/refSeqs.js
PATRICIA  = names/root.json

# wildcard expression for generated files of feature names
NAMES = data/tracks/*/*/names.json

# proxy targets directory: touching "$(PROCESSED)/X" indicates successful processing of file "X"
PROCESSED = processed

# staging directory
STAGE = staged

# name of staged GFF file
STAGED_GFF = staged.gff

# proxy targets for complete processing of BED, GFF and WIG files into JBrowse tracks
TRACKS = $(addprefix $(PROCESSED)/,$(ALL_BED2GFF) $(ALL_GFF) $(ALL_WIG))

# target directories
DIRS = $(PROCESSED) $(STAGE) $(dir $(CHUNKS) $(PATRICIA))



# Rules

all: $(CHUNKS) $(TRACKS) $(PATRICIA)

clean:
	rm -rf $(DIRS)

# names
$(PATRICIA): $(DIRS) $(TRACKS)
	$(GENERATE_NAMES) $(NAMES)

# directories
# one-off dirs
$(DIRS):
	mkdir $@

# aggregated reference sequences
# DO NOT OVERWRITE $(REFSEQS) if it already exists!
$(REFSEQS): $(ALL_FASTA)
	 test -e $(REFSEQS) || (cat $(ALL_FASTA) >$@)

# sequence chunking for client
$(CHUNKS): $(DIRS) $(REFSEQS)
	$(PREPARE_REFSEQS) --fasta $(REFSEQS)

# staging directories for GFF, FASTA & JBrowse config files
$(STAGE)/%: $(DIRS) %.gff
	test -d $@ || mkdir $@

# staged GFF
$(STAGE)/%/$(STAGED_GFF): $(STAGE)/% %.gff
	ln -sf $(CURDIR)/$*.gff $(STAGE)/$*/$*.gff

# staged FASTA
$(STAGE)/%/$(REFSEQS): $(STAGE)/% $(REFSEQS)
	ln -sf $(CURDIR)/$(REFSEQS) $(STAGE)/$*/$(REFSEQS)

# staged JBrowse config file
$(STAGE)/%/$(CONFIG): $(DIRS) $(CHUNKS) $(STAGE)/% $(STAGE)/%/$(STAGED_GFF) $(CONFIG)
	echo '{' >$@
	echo '  "description": "$* tracks",' >>$@
	echo '  "db_adaptor": "Bio::DB::SeqFeature::Store",' >>$@
	echo '  "db_args": { "-adaptor": "memory",' >>$@
	echo '               "-dir": "$(STAGE)/$*" },' >>$@
	echo '  "TRACK DEFAULTS": {' >>$@
	echo '    "class": "feature",' >>$@
	echo '    "autocomplete": "all"' >>$@
	echo '  },' >>$@
	echo '  "tracks": [' >>$@
	cat $(CONFIG) | perl -pe 's/"track"\s*:\s*"([^"]*)"/"track": "$*_$$1"/g;s/"key"\s*:\s*"([^"]*)"/"key": "$* $$1"/g' >>$@
	echo '  ]' >>$@
	echo '}' >>$@

# two ways of making GFF files into JSON: with & without config file
# JBrowse config file + GFF -> Bio::DB -> JSON
$(PROCESSED)/%.gff: $(CHUNKS) $(STAGE)/%/$(STAGED_GFF) $(STAGE)/%/$(CONFIG) %.gff $(CONFIG)
	$(BIODB_TO_JSON) --conf $(STAGE)/$*/$(CONFIG)
	touch $@

# fallback (no config file): GFF -> JSON
# (it should not be necessary to include $(STAGED_GFF) in the deps list for this rule, but make seems to get confused otherwise)
$(PROCESSED)/%.gff: $(CHUNKS) $(STAGE)/%/$(STAGED_GFF) %.gff
	$(GFF_TO_JSON) --gff $*.gff --key $* --autocomplete all --featlabel
	touch $@

# WIG -> JSON
$(PROCESSED)/%.wig: $(CHUNKS) %.wig
	$(WIG_TO_JSON) --wig $*.wig --tracklabel $*

# BED -> GFF
%.gff: %.bed
	cat $< | perl -ane 'print join ("\t", $$F[0], "bed2gff", "feature", $$F[1]+1, $$F[2]+1, ".", ".", ".", ""), "\n" if @F >= 3' >$@

# don't delete intermediate files
.SECONDARY:
